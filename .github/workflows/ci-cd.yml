# Name of workflow that will appear in Github Actions tab
name: Micronaut CRUD CI/CD

# When workflow will run
on:
  pull_request:
    types: [closed] # Triggers when PR is closed
    branches:
      - main # Only for PRs targetting main branch

#Composition of workflow
jobs:
  # Name of job
  build-and-test:
    # Only run if PR was actually merged, not just closed
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest # use ubuntu as OS. Creates ubuntu VM on github infrastructure
    
    # Services needs for the job
    services:
      mysql: # name of service
        image: mysql:8.0 # container image for mysql
        env:
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_HOST: '%'
        ports:
          - 3306:3306 # map container port to host port
        # health check to ensure mysql is ready
        options: >-
          --health-cmd="mysqladmin ping -h localhost" 
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # steps to execute in this job
    steps:
      # Get the code(like git clone)
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Java(need JVM to run Jar file)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      # Make gradlew executable
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Wait for mysql to be ready
      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"3306" --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 2
          done

      # Check mysql connection
      - name: Verify MySQL connection
        run: mysql -h"127.0.0.1" -P"3306" -uroot -ppassword -e "SHOW DATABASES;"

      #Build jar file
      - name: Build and Test
        run: ./gradlew build
        env:
          DATASOURCES_DEFAULT_URL: jdbc:mysql://localhost:3306/${{ secrets.DB_NAME }}
          DATASOURCES_DEFAULT_USERNAME: ${{ secrets.DB_USERNAME }}
          DATASOURCES_DEFAULT_PASSWORD: ${{ secrets.DB_PASSWORD }}

      #Save the built jar file to github actions artifacts
      - name: Upload JAR as Build Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: micronaut-crud-app
          path: build/libs/*.jar

      # Save jar file to AWS S3 (Permanent cloud storage)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp build/libs/*.jar s3://${{ secrets.S3_BUCKET }}/artifacts/

      # Save jar file to GitHub Packages (Maven repository)
      - name: Publish to GitHub Packages
        run: ./gradlew publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}